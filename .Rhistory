endyear <- 1929
url_init <- "http://aviation-safety.net/database/dblist.php?Year="
# initiate empty dataframe, in which we will store the data
dat <- data.frame(date = numeric(0), type = numeric(0), registration = numeric(0),
operator = numeric(0), fatalities = numeric(0),
location = numeric(0), category = numeric(0))
for (year in startyear:endyear) {
# get url for this year
url_year <- paste0(url_init, year)
# get max pages in current year
pages <- url_year %>% read_html() %>%
html_nodes(xpath = '//*[@id="contentcolumnfull"]/div/div[2]') %>%
html_text() %>% strsplit(" ") %>% unlist() %>%
as.numeric() %>% max()
if(pages == -Inf) { #no pages, only one page for current year
incidents <- url_year %>% read_html() %>%
html_nodes("table") %>% #use CSS selector, not x-path
html_table() %>% data.frame()
#combine the data
dat <- rbind(dat,incidents)
} else { #loop through pages of current year
for (page in 1:pages) {
url <- paste0(url_year,"&lang=&page=", page)
# get the html data and convert it to a data.frame
incidents <- url %>% read_html() %>%
html_nodes(xpath = '//*[@id="contentcolumnfull"]/div/table') %>%
html_table() %>% data.frame()
# combine the data
dat <- rbind(dat, incidents)
}
}
}
# get rid of "near" rows
dat$location <- sapply("near", gsub, "" ,dat$location)
View(dat)
# For Data-Wrangling
library(dplyr)
library(stringr)
source("tabledata.R")
dat$location <- gsub("near", "", dat$location)
dat <- mutate(dat, occurence = 1)
data_year <- dat
data_year$year <- str_sub(data_year$date, -4, -1)
data_year_general <- group_by(data_year, year) %>%
summarize(total_occurence = sum(occurence),
total_fatality = sum(as.numeric(!is.na(fat.))),
average_fatality = mean(round(total_fatality / total_occurence, digits = 2)))
data_year_military <- filter(data_year, str_detect(operator, fixed("AF")) |
str_detect(operator, fixed("Navy")) |
str_detect(operator, fixed("Army")) |
str_detect(operator, fixed("Air Force")))
runApp()
p <- plot_geo(df) %>%
add_trace(
z = ~GDP..BILLIONS., color = ~GDP..BILLIONS., colors = 'Blues',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'GDP Billions US$', tickprefix = '$') %>%
layout(
title = '2014 Global GDP<br>Source:<a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html">CIA World Factbook</a>',
geo = g
)
library(plotly)
p <- plot_geo(df) %>%
add_trace(
z = ~GDP..BILLIONS., color = ~GDP..BILLIONS., colors = 'Blues',
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = 'GDP Billions US$', tickprefix = '$') %>%
layout(
title = '2014 Global GDP<br>Source:<a href="https://www.cia.gov/library/publications/the-world-factbook/fields/2195.html">CIA World Factbook</a>',
geo = g
)
View(p)
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5
)
p <- plot_geo(df, lat = ~lat, lon = ~long) %>%
add_markers(
text = ~paste(airport, city, state, paste("Arrivals:", cnt), sep = "<br />"),
color = ~cnt, symbol = I("square"), size = I(8), hoverinfo = "text"
) %>%
colorbar(title = "Incoming flights<br />February 2011") %>%
layout(
title = 'Most trafficked US airports<br />(Hover for airport)', geo = g
)
p <- map_data("world") %>%
plot_ly(
x = ~long,
y = ~lat,
fillcolor = 'white',
hoverinfo = "none") %>%
add_polygons(
line = list(color = 'black', width = 0.5)) %>%
layout(
xaxis = blank_layer,
yaxis = blank_layer)
View(p)
url_init <- "http://aviation-safety.net/database/dblist.php?Year="
# initiate empty dataframe, in which we will store the data
dat <- data.frame(date = numeric(0), type = numeric(0), registration = numeric(0),
operator = numeric(0), fatalities = numeric(0),
location = numeric(0), category = numeric(0))
for (year in startyear:endyear){
# get url for this year
url_year <- paste0(url_init, year)
# get pages
pages <- url_year %>% html() %>%
html_nodes(xpath = '//*[@id="contentcolumnfull"]/div/div[2]') %>%
html_text() %>% strsplit(" ") %>% unlist() %>%
as.numeric() %>% max()
# loop through the pages
for (page in 1:pages){
url <- paste0(url_year,"&lang=&page=", page)
# get the html data and convert it to a data.frame
incidents <- url %>% html() %>%
html_nodes(xpath = '//*[@id="contentcolumnfull"]/div/table') %>%
html_table() %>% data.frame()
# combine the data
dat <- rbind(dat, incidents)
}
}
library(rvest)
library(dplyr)
startyear <- 1940
endyear <- 1945
url_init <- "http://aviation-safety.net/database/dblist.php?Year="
# initiate empty dataframe, in which we will store the data
dat <- data.frame(date = numeric(0), type = numeric(0), registration = numeric(0),
operator = numeric(0), fatalities = numeric(0),
location = numeric(0), category = numeric(0))
for (year in startyear:endyear){
# get url for this year
url_year <- paste0(url_init, year)
# get pages
pages <- url_year %>% html() %>%
html_nodes(xpath = '//*[@id="contentcolumnfull"]/div/div[2]') %>%
html_text() %>% strsplit(" ") %>% unlist() %>%
as.numeric() %>% max()
# loop through the pages
for (page in 1:pages){
url <- paste0(url_year,"&lang=&page=", page)
# get the html data and convert it to a data.frame
incidents <- url %>% html() %>%
html_nodes(xpath = '//*[@id="contentcolumnfull"]/div/table') %>%
html_table() %>% data.frame()
# combine the data
dat <- rbind(dat, incidents)
}
}
library("dplyr")
library("rvest")
# set-up of initial values
startyear <- 1920
endyear <- 1929
url_init <- "http://aviation-safety.net/database/dblist.php?Year="
# initiate empty dataframe, in which we will store the data
dat <- data.frame(date = numeric(0), type = numeric(0), registration = numeric(0),
operator = numeric(0), fatalities = numeric(0),
location = numeric(0), category = numeric(0))
for (year in startyear:endyear) {
# get url for this year
url_year <- paste0(url_init, year)
# get max pages in current year
pages <- url_year %>% read_html() %>%
html_nodes(xpath = '//*[@id="contentcolumnfull"]/div/div[2]') %>%
html_text() %>% strsplit(" ") %>% unlist() %>%
as.numeric() %>% max()
if(pages == -Inf) { #no pages, only one page for current year
incidents <- url_year %>% read_html() %>%
html_nodes("table") %>% #use CSS selector, not x-path
html_table() %>% data.frame()
#combine the data
dat <- rbind(dat,incidents)
} else { #loop through pages of current year
for (page in 1:pages) {
url <- paste0(url_year,"&lang=&page=", page)
# get the html data and convert it to a data.frame
incidents <- url %>% read_html() %>%
html_nodes(xpath = '//*[@id="contentcolumnfull"]/div/table') %>%
html_table() %>% data.frame()
# combine the data
dat <- rbind(dat, incidents)
}
}
}
# get rid of "near" rows
dat$location <- sapply("near", gsub, "" ,dat$location)
# For Data-Wrangling
library(dplyr)
library(stringr)
source("tabledata.R")
dat$location <- gsub("near", "", dat$location)
dat <- mutate(dat, occurence = 1)
data_year <- dat
data_year$year <- str_sub(data_year$date, -4, -1)
data_year_general <- group_by(data_year, year) %>%
summarize(total_occurence = sum(occurence),
total_fatality = sum(as.numeric(!is.na(fat.))),
average_fatality = mean(round(total_fatality / total_occurence, digits = 2)))
data_year_military <- filter(data_year, str_detect(operator, fixed("AF")) |
str_detect(operator, fixed("Navy")) |
str_detect(operator, fixed("Army")) |
str_detect(operator, fixed("Air Force")))
summary_year_military_operator <- group_by(data_year_military, operator) %>%
summarize(total_occurence = sum(occurence),
total_fatality = sum(as.numeric(!is.na(fat.))),
average_fatality = mean(round(total_fatality / total_occurence, digits = 2)))
summary_year_military_plane <- group_by(data_year_military, type) %>%
summarize(total_occurence = sum(occurence),
total_fatality = sum(as.numeric(!is.na(fat.))),
average_fatality = mean(round(total_fatality / total_occurence, digits = 2)))
data_year_private <- filter(data_year, operator == "private" |
operator == "Private")
summary_year_private_operator <- group_by(data_year_private, operator) %>%
summarize(total_occurence = sum(occurence),
total_fatality = sum(as.numeric(!is.na(fat.))),
average_fatality = mean(round(total_fatality / total_occurence, digits = 2)))
summary_year_private_plane <- group_by(data_year_private, type) %>%
summarize(total_occurence = sum(occurence),
total_fatality = sum(as.numeric(!is.na(fat.))),
average_fatality = mean(round(total_fatality / total_occurence, digits = 2)))
data_year_ex_military <- setdiff(data_year, data_year_military)
data_year_other <- setdiff(data_year_ex_military, data_year_private)
summary_year_other <- group_by(data_year_other, operator) %>%
summarize(total_occurence = sum(occurence),
total_fatality = sum(as.numeric(!is.na(fat.))),
average_fatality = mean(round(total_fatality / total_occurence, digits = 2)))
summary_year_other_plane <- group_by(data_year_other, type) %>%
summarize(total_occurence = sum(occurence),
total_fatality = sum(as.numeric(!is.na(fat.))),
average_fatality = mean(round(total_fatality / total_occurence, digits = 2)))
runApp()
runApp()
runApp()
runApp()
runApp()
shinyApp(ui = ui, server = server)
# data_month <- dat
# data_month$date <- str_sub(data_month$date, 4, 6)
source('ui.r')
source('server.r')
shinyApp(ui = ui, server = server)
# For Data-Wrangling
library(dplyr)
library(stringr)
source("tabledata.R")
dat$location <- gsub("near", "", dat$location)
dat <- mutate(dat, occurence = 1)
data_year <- dat
data_year$year <- str_sub(data_year$date, -4, -1)
data_year_general <- group_by(data_year, year) %>%
summarize(total_occurence = sum(occurence),
total_fatality = sum(as.numeric(!is.na(fat.))),
average_fatality = mean(round(total_fatality / total_occurence, digits = 2)))
data_year_military <- filter(data_year, str_detect(operator, fixed("AF")) |
str_detect(operator, fixed("Navy")) |
str_detect(operator, fixed("Army")) |
str_detect(operator, fixed("Air Force")))
summary_year_military_operator <- group_by(data_year_military, operator) %>%
summarize(total_occurence = sum(occurence),
total_fatality = sum(as.numeric(!is.na(fat.))),
average_fatality = mean(round(total_fatality / total_occurence, digits = 2)))
summary_year_military_plane <- group_by(data_year_military, type) %>%
summarize(total_occurence = sum(occurence),
total_fatality = sum(as.numeric(!is.na(fat.))),
average_fatality = mean(round(total_fatality / total_occurence, digits = 2)))
data_year_private <- filter(data_year, operator == "private" |
operator == "Private")
summary_year_private_operator <- group_by(data_year_private, operator) %>%
summarize(total_occurence = sum(occurence),
total_fatality = sum(as.numeric(!is.na(fat.))),
average_fatality = mean(round(total_fatality / total_occurence, digits = 2)))
summary_year_private_plane <- group_by(data_year_private, type) %>%
summarize(total_occurence = sum(occurence),
total_fatality = sum(as.numeric(!is.na(fat.))),
average_fatality = mean(round(total_fatality / total_occurence, digits = 2)))
data_year_ex_military <- setdiff(data_year, data_year_military)
data_year_other <- setdiff(data_year_ex_military, data_year_private)
summary_year_other <- group_by(data_year_other, operator) %>%
summarize(total_occurence = sum(occurence),
total_fatality = sum(as.numeric(!is.na(fat.))),
average_fatality = mean(round(total_fatality / total_occurence, digits = 2)))
summary_year_other_plane <- group_by(data_year_other, type) %>%
summarize(total_occurence = sum(occurence),
total_fatality = sum(as.numeric(!is.na(fat.))),
average_fatality = mean(round(total_fatality / total_occurence, digits = 2)))
# data_month <- dat
# data_month$date <- str_sub(data_month$date, 4, 6)
source('ui.r')
# data_month <- dat
# data_month$date <- str_sub(data_month$date, 4, 6)
source('ui.r')
source('server.r')
shinyApp(ui = ui, server = server)
# data_month <- dat
# data_month$date <- str_sub(data_month$date, 4, 6)
source('ui.r')
source('server.r')
shinyApp(ui = ui, server = server)
# data_month <- dat
# data_month$date <- str_sub(data_month$date, 4, 6)
source('ui.r')
source('server.r')
shinyApp(ui = ui, server = server)
# data_month <- dat
# data_month$date <- str_sub(data_month$date, 4, 6)
source('ui.r')
source('server.r')
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
shinyApp(ui = ui, server = server)
# For Data-Wrangling
library(dplyr)
library(stringr)
# data_month <- dat
# data_month$date <- str_sub(data_month$date, 4, 6)
source('ui.r')
source('server.r')
# data_month <- dat
# data_month$date <- str_sub(data_month$date, 4, 6)
source('ui.r')
# UI for Plane Crash App
library(shinythemes)
library(plotly)
ui <- fluidPage(
theme = shinytheme("slate"),
includeCSS("style.css"),
titlePanel(h1("Plane Crash Data from 1920-2018")
),
sidebarLayout(
sidebarPanel(
h2(strong("Description")),
p("This data was collected from the Aviation Safety
Network Database, containing descriptions of the
incidents with the aircraft type, operator, date,
and location of the crash."),
br(),
h2(strong("Purpose"))
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel(strong("Table for Operator"), br(),
p("The data table gives a list of the operators involved in the crashes in the given years.")),
fluidRow(
column(4,
wellPanel(
sliderInput("obs", "Number of observations:",
min = 1, max = 1000, value = 500)
)
),
column(8,
plotOutput("distPlot")
)
),
tabPanel(strong("Map of Crashes"), br(),
plotOutput('plot'))
)
)
)
)
# UI for Plane Crash App
library(shiny)
library(shinythemes)
library(plotly)
ui <- fluidPage(
theme = shinytheme("slate"),
includeCSS("style.css"),
titlePanel(h1("Plane Crash Data from 1920-2018")
),
sidebarLayout(
sidebarPanel(
h2(strong("Description")),
p("This data was collected from the Aviation Safety
Network Database, containing descriptions of the
incidents with the aircraft type, operator, date,
and location of the crash."),
br(),
h2(strong("Purpose"))
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel(strong("Table for Operator"), br(),
p("The data table gives a list of the operators involved in the crashes in the given years.")),
fluidRow(
column(4,
wellPanel(
sliderInput("obs", "Number of observations:",
min = 1, max = 1000, value = 500)
)
),
column(8,
plotOutput("distPlot")
)
),
tabPanel(strong("Map of Crashes"), br(),
plotOutput('plot'))
)
)
)
)
# data_month <- dat
# data_month$date <- str_sub(data_month$date, 4, 6)
source('ui.r')
source('server.r')
shinyApp(ui = ui, server = server)
# data_month <- dat
# data_month$date <- str_sub(data_month$date, 4, 6)
source('ui.r')
source('server.r')
shinyApp(ui = ui, server = server)
# data_month <- dat
# data_month$date <- str_sub(data_month$date, 4, 6)
source('ui.r')
source('server.r')
shinyApp(ui = ui, server = server)
runApp()
# data_month <- dat
# data_month$date <- str_sub(data_month$date, 4, 6)
source('ui.r')
source('server.r')
shinyApp(ui = ui, server = server)
runApp()
runApp('Final Project.R')
# data_month <- dat
# data_month$date <- str_sub(data_month$date, 4, 6)
source('ui.r')
source('server.r')
shinyApp(ui = ui, server = server)
library(rworldmap)
install.packages("rworldmap")
library("rworldmap")
output$plot <- renderPlot({
newmap <- getMap(resolution = "low")
plot(newmap, xlim = c(-20, 59), ylim = c(35, 71), asp = 1)
})
# data_month <- dat
# data_month$date <- str_sub(data_month$date, 4, 6)
source('ui.r')
source('server.r')
shinyApp(ui = ui, server = server)
runApp('Final Project.R')
shinyApp(ui = ui, server = server)
# data_month <- dat
# data_month$date <- str_sub(data_month$date, 4, 6)
source('ui.r')
source('server.r')
shinyApp(ui = ui, server = server)
# data_month <- dat
# data_month$date <- str_sub(data_month$date, 4, 6)
source('ui.r')
source('server.r')
shinyApp(ui = ui, server = server)
# data_month <- dat
# data_month$date <- str_sub(data_month$date, 4, 6)
source('ui.r')
source('server.r')
shinyApp(ui = ui, server = server)
# data_month <- dat
# data_month$date <- str_sub(data_month$date, 4, 6)
source('ui.r')
source('server.r')
shinyApp(ui = ui, server = server)
# data_month <- dat
# data_month$date <- str_sub(data_month$date, 4, 6)
source('ui.r')
source('server.r')
shinyApp(ui = ui, server = server)
# data_month <- dat
# data_month$date <- str_sub(data_month$date, 4, 6)
source('ui.r')
source('server.r')
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
library(plotly)
# data_month <- dat
# data_month$date <- str_sub(data_month$date, 4, 6)
source('ui.r')
source('server.r')
shinyApp(ui = ui, server = server)
p <- plot_ly (
type = 'scattergeo',
lon = c( 42, 39 ) ,
lat =c( 12, 50 ) ,
text =c( 'Rome' , 'Greece') ,
mode = 'markers' )
print(p)
# data_month <- dat
# data_month$date <- str_sub(data_month$date, 4, 6)
source('ui.r')
source('server.r')
shinyApp(ui = ui, server = server)
# data_month <- dat
# data_month$date <- str_sub(data_month$date, 4, 6)
source('ui.r')
source('server.r')
shinyApp(ui = ui, server = server)
# data_month <- dat
# data_month$date <- str_sub(data_month$date, 4, 6)
source('ui.r')
source('server.r')
shinyApp(ui = ui, server = server)
